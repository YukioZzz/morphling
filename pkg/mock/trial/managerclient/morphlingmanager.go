// Code generated by MockGen. DO NOT EDIT.
// Source: managerclient.go

// Package mock_managerclient is a generated GoMock package.
package mock_managerclient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	morphlingv1alpha1 "github.com/alibaba/morphling/api/v1alpha1"
	api_pb "github.com/alibaba/morphling/api/v1alpha1/manager"
)

// MockManagerClient is a mock of ManagerClient interface.
type MockManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerClientMockRecorder
}

// MockManagerClientMockRecorder is the mock recorder for MockManagerClient.
type MockManagerClientMockRecorder struct {
	mock *MockManagerClient
}

// NewMockManagerClient creates a new mock instance.
func NewMockManagerClient(ctrl *gomock.Controller) *MockManagerClient {
	mock := &MockManagerClient{ctrl: ctrl}
	mock.recorder = &MockManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerClient) EXPECT() *MockManagerClientMockRecorder {
	return m.recorder
}

// DeleteTrialObservationLog mocks base method.
func (m *MockManagerClient) DeleteTrialObservationLog(instance *morphlingv1alpha1.Trial) (*api_pb.DeleteObservationLogReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrialObservationLog", instance)
	ret0, _ := ret[0].(*api_pb.DeleteObservationLogReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrialObservationLog indicates an expected call of DeleteTrialObservationLog.
func (mr *MockManagerClientMockRecorder) DeleteTrialObservationLog(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrialObservationLog", reflect.TypeOf((*MockManagerClient)(nil).DeleteTrialObservationLog), instance)
}

// GetTrialObservationLog mocks base method.
func (m *MockManagerClient) GetTrialObservationLog(instance *morphlingv1alpha1.Trial) (*api_pb.GetObservationLogReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrialObservationLog", instance)
	ret0, _ := ret[0].(*api_pb.GetObservationLogReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialObservationLog indicates an expected call of GetTrialObservationLog.
func (mr *MockManagerClientMockRecorder) GetTrialObservationLog(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialObservationLog", reflect.TypeOf((*MockManagerClient)(nil).GetTrialObservationLog), instance)
}
