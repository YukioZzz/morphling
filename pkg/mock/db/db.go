// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api_pb "github.com/alibaba/morphling/api/v1alpha1/manager"
)

// MockMorphlingDBInterface is a mock of MorphlingDBInterface interface
type MockMorphlingDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMorphlingDBInterfaceMockRecorder
}

// MockMorphlingDBInterfaceMockRecorder is the mock recorder for MockMorphlingDBInterface
type MockMorphlingDBInterfaceMockRecorder struct {
	mock *MockMorphlingDBInterface
}

// NewMockMorphlingDBInterface creates a new mock instance
func NewMockMorphlingDBInterface(ctrl *gomock.Controller) *MockMorphlingDBInterface {
	mock := &MockMorphlingDBInterface{ctrl: ctrl}
	mock.recorder = &MockMorphlingDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMorphlingDBInterface) EXPECT() *MockMorphlingDBInterfaceMockRecorder {
	return m.recorder
}

// InitMySql mocks base method
func (m *MockMorphlingDBInterface) InitMySql() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMySql")
}

// InitMySql indicates an expected call of InitMySql
func (mr *MockMorphlingDBInterfaceMockRecorder) InitMySql() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMySql", reflect.TypeOf((*MockMorphlingDBInterface)(nil).InitMySql))
}

// AddToDB mocks base method
func (m *MockMorphlingDBInterface) AddToDB(trialName string, observationLog *api_pb.ObservationLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToDB", trialName, observationLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDB indicates an expected call of AddToDB
func (mr *MockMorphlingDBInterfaceMockRecorder) AddToDB(trialName, observationLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToDB", reflect.TypeOf((*MockMorphlingDBInterface)(nil).AddToDB), trialName, observationLog)
}

// GetObservationLog mocks base method
func (m *MockMorphlingDBInterface) GetObservationLog(trialName, metricName, startTime, endTime string) (*api_pb.ObservationLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObservationLog", trialName, metricName, startTime, endTime)
	ret0, _ := ret[0].(*api_pb.ObservationLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservationLog indicates an expected call of GetObservationLog
func (mr *MockMorphlingDBInterfaceMockRecorder) GetObservationLog(trialName, metricName, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservationLog", reflect.TypeOf((*MockMorphlingDBInterface)(nil).GetObservationLog), trialName, metricName, startTime, endTime)
}

// DeleteObservationLog mocks base method
func (m *MockMorphlingDBInterface) DeleteObservationLog(trialName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObservationLog", trialName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObservationLog indicates an expected call of DeleteObservationLog
func (mr *MockMorphlingDBInterfaceMockRecorder) DeleteObservationLog(trialName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObservationLog", reflect.TypeOf((*MockMorphlingDBInterface)(nil).DeleteObservationLog), trialName)
}
